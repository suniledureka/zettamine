Deploying React Application in AWS
----------------------------------
-> Login to AWS Management Console
-> AWS Services > S3 > click on "Create bucket"

-> Bucket name: "pathfinder-bucket"
AWS Region:  

unselect/disable the "Block all public access" settings so that your live app will be visible to the public. 
-> proceed to create the bucket.

-> Open the newly created bucket. 
-> Select the "Properties" tab and go to "Static website hosting" (scroll down to the bottom of page). Enable static web hosting.

Static web hosting: Enable
Hosting type: Host a static website

index document: index.html
Error document: index.html
> Save Changes

-> Set Permissions

Go to the "Permissions" tab and select "Bucket Policy". You can fill in the policies here. As a starter, let us set read-only access to anonymous users. Make sure you mention your app details for the "Resource" field. Save Changes.

{
 "Version": "2012-10-17",
 "Statement":[
    {
      "Sid":"AddPerm",
      "Effect":"Allow",
      "Principal":"*",
      "Action": "s3:getObject",
      "Resource":"arn:aws:s3:::pathfinder-deploy-demo/*"
    }
 ]
}

> Save Changes

- select "Objects" tab 
->upload your production build to the S3 bucket.

Click on "Upload" and select the "build" directory from your machine. That's it!

-> Find the hosted URL of your website under "Static Website Hosting" within the "Properties" tab.

AWS Service : Route 53  
===============================================================================

Deploying a Spring Boot Application on AWS Using AWS Elastic Beanstalk
----------------------------------------------------------------------
Elastic Beanstalk helps to quickly deploy applications with a very simple interface, We can deploy applications to tomcat, can run Java applications, Python applications etc

-- no need to create EC2 instance and no need to upload jar/war file to S3 bucket

1) Create New Spring Boot Starter Project   backend-app
in application.properties
server.port=5000

in pom.xml
<packaging>jar</packaging>
<build>
 <finalName>mpa</final>
</build>

-- Right Click on Project > Run As > Maven Build..
Goals: clean compile package install

2) Sign in to the AWS Management Console - login

3) Select  Region

All Services > Compute > Elastic Beanstalk  > Applications > Create Application

Application Name :  xxxx â€“ this name will be appended as part of your URL
No Tags
> Create

Click on "Create new Environment" 

Web Server Environment
Domain: xxx

Platform: Java
Platform Branch : Corretto xxxx
Version:xxxx

Upload your Code:  > Local File : Choose File (jar file) from /target folder of your project
> Create Application

-- takes some minutes

Run the URL in Browser
try different APIs/ endpoints


incase if the URL is not working -try below
Configuration
Software : Edit
Environment Properties :  SERVER_PORT : 5000		> Apply

===================================================================================
CORS Configuration

@Configuration
public class CorsConfiguration {

	@Bean
	public WebMvcConfigurer corsConfigurer() {
		return new WebMvcConfigurer() {
			@Override
			public void addCorsMappings(CorsRegistry registry) {
				registry.addMapping("/**").allowedMethods("*")
						.allowedOrigins("*");
			}
		};
	}
}


===================================================================================
